//Flexbox Reference https://yoksel.github.io/flex-cheatsheet/#section-flex-direction
//Column Grid
$grid-columns: 12 !default; // Set number of columns in the grid
$gutter: $spacingS !default; // Set gutter size

//Mixin Options
//$direction:   row(default) | row-reverse | column | column-reverse
//$align:       flex-start(default) | flex-end | center | space-between | space-around | stretch
//$justify:     flex-start(Default) | flex-end | center | space-between | space-around | space-evenly
//$wrap: nowrap | wrap | wrap-reverse
//@include flex-parent($direction:false, $align: false, $justify:false, $wrap:false )
@mixin flex-parent($direction:false, $align: false, $justify:false, $wrap:false ) {
    display: flex;
  //direction
    @if $direction {
        flex-direction: $direction;
    } @else {
        flex-direction: row;
    }
    @if $align {
        align-items: $align;
    } @else {
        align-items: flex-start;
    }
    @if $justify {
        justify-content: $justify;
    } @else { 
        justify-content: flex-start;
    }
    @if $wrap {
        flex-wrap: $wrap;
    } @else {
        flex-wrap: wrap;
    }
}

@mixin row() {
    width: 100%;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
}

// Condition to run inside of the col mixin * not for developer use *
@mixin flex-col($col-number, $col-gutter: 0) {
    @if type-of($col-number) == number {
        @if $col-number > $grid-columns or $col-number == 0 {
            @warn "Column number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
        } @else {
            flex-basis: 100% / $grid-columns * $col-number;
            max-width: 100% / $grid-columns * $col-number;
            @if $col-gutter != 0 {
                padding: $col-gutter;
            }
        }
    // If no col number is passed then arg is set to "auto" by default
    // "auto" mode fills the horizontal space with evenly sized containers
    } @else if $col-number == "auto" {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
        @if $col-gutter != 0 {
            padding: $col-gutter;
        }
    } @else {
        @warn "Column number argument must either be the string 'auto' or a number greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
    }
} // Condition to run inside of the col mixin * not for developer use *

// Condition to run inside of the col-offset mixin * not for developer use *
@mixin col-offset-condition($offset-number) {
  @if type-of($offset-number) != number {
    @warn "Column offset number must be a number (only arg or second arg in the col mixin)";
  } @else if $offset-number == 0 {
    @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  } @else if $offset-number > $grid-columns {
    @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  } @else {
    margin-left: 100% / $grid-columns * $offset-number;
  }
} // Condition to run inside of the col-offset mixin * not for developer use *

@mixin col-offset($offset-number: 0) {
  @include col-offset-condition($offset-number);
}

//Flex Direction
@mixin col-reverse() {flex-direction: column-reverse;}
@mixin flex-column() {flex-direction: column;}
@mixin row-reverse() {flex-direction: row-reverse;}

//Justify Content
//Align Items
//IF Row Horizontal Alignment
//If Column Vertical Alignment

@mixin justify-start() {justify-content: flex-start;} //The flex-start value aligns the flex items at the beginning of the container (this is default)
@mixin justify-middle() {justify-content: center;} //The center value aligns the flex items at the center of the container:
@mixin justify-end() {justify-content: flex-end;}
@mixin justify-around() { justify-content: space-around;}
@mixin justify-between() {justify-content: space-between;}

//Align Items
//If Row Vertical Alignment
//IF Columns Horizontal Alignment
@mixin align-top() {align-items: flex-start;}
@mixin align-center() { align-items: center; }
@mixin align-bottom() { align-items: flex-end; }

//Flex Order
@mixin flex-order-start() { order: 0;}
@mixin flex-order-first() { order: -1;}
@mixin flex-order-last() {order: 1;}